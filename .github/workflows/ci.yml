name: Node.js TDD Pipeline

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  test-first:
    name: Test-First Development
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run tests first (TDD)
      run: |
        echo "Running tests first (TDD approach)"
        npm test
        echo "If tests fail, that's expected in TDD - we write tests before implementation"

  implement:
    name: Implementation
    needs: test-first
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Use Node.js
      uses: actions/setup-node@v3
      with:
        node-version: '18.x'
        cache: 'npm'
    
    - name: Install dependencies
      run: npm ci
    
    - name: Run implementation tests
      run: npm test

  containerize:
    name: Containerization
    needs: implement
    runs-on: ubuntu-latest
    steps:
    - uses: actions/checkout@v3
    
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v2
    
    - name: Build Docker image
      run: docker build -t node-tdd-api-demo:test .
    
    - name: List Docker images
      run: docker images
    
    - name: Run Docker container
      run: |
        docker run -d -p 3000:3000 --name test-app node-tdd-api-demo:test
        echo "Container started. Waiting for it to be ready..."
        sleep 10
    
    - name: Verify container is running
      run: |
        docker ps
        echo "Testing container health..."
        curl -v http://localhost:3000/api/hello
        echo "Testing container logs..."
        docker logs test-app
    
    - name: Test API endpoints
      run: |
        echo "Testing /api/hello endpoint..."
        curl -s http://localhost:3000/api/hello | jq .
        echo "Testing /api/test endpoint..."
        curl -s http://localhost:3000/api/test | jq .
        echo "Testing /api/sum endpoint..."
        curl -s -X POST http://localhost:3000/api/sum \
          -H "Content-Type: application/json" \
          -d '{"numbers": [1, 2, 3, 4, 5]}' | jq .
    
    - name: Cleanup
      if: always()
      run: |
        echo "Stopping and removing container..."
        docker stop test-app || true
        docker rm test-app || true
        echo "Container cleanup completed" 